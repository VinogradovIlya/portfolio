-- Упражнение 01: Аномалия потерянного обновления (Lost Update Anomaly)
-- Демонстрация под уровнем изоляции READ COMMITTED (по умолчанию)

-- Проверяем текущий уровень изоляции (должен быть READ COMMITTED)
SHOW TRANSACTION ISOLATION LEVEL;

-- ========== СЕССИЯ #1 ==========
-- Шаг 1: Начинаем транзакцию
BEGIN;

-- Шаг 2: Читаем текущий рейтинг Pizza Hut
SELECT * FROM pizzeria WHERE name = 'Pizza Hut';
-- Ожидаемый результат: rating = 5 (из предыдущего упражнения)

-- ========== СЕССИЯ #2 ==========
-- Шаг 1: Начинаем отдельную транзакцию
BEGIN;

-- Шаг 2: Читаем текущий рейтинг Pizza Hut
SELECT * FROM pizzeria WHERE name = 'Pizza Hut';
-- Ожидаемый результат: rating = 5 (тот же результат)

-- ========== СЕССИЯ #1 ==========
-- Шаг 3: Обновляем рейтинг на 4
UPDATE pizzeria
SET rating = 4
WHERE name = 'Pizza Hut';

-- Проверяем, что обновление прошло
SELECT * FROM pizzeria WHERE name = 'Pizza Hut';
-- Результат в Сессии #1: rating = 4

-- ========== СЕССИЯ #2 ==========
-- Шаг 3: Пытаемся обновить рейтинг на 3.6
-- ВНИМАНИЕ: Эта команда будет заблокирована до COMMIT в Сессии #1
UPDATE pizzeria
SET rating = 3.6
WHERE name = 'Pizza Hut';

-- ========== СЕССИЯ #1 ==========
-- Шаг 4: Фиксируем транзакцию
COMMIT;

-- После COMMIT в Сессии #1, UPDATE в Сессии #2 разблокируется
-- и применится к уже измененной строке

-- ========== СЕССИЯ #2 ==========
-- Шаг 4: Фиксируем транзакцию
COMMIT;

-- Итоговая проверка в любой сессии:
SELECT * FROM pizzeria WHERE name = 'Pizza Hut';
-- Финальный результат: rating = 3.6 (обновление из Сессии #1 потеряно!)