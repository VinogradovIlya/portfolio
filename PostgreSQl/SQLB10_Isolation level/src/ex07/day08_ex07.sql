-- Упражнение 07: Взаимная блокировка (Deadlock)
-- Демонстрация ситуации deadlock между двумя транзакциями

-- ========== СЕССИЯ #1 ==========
-- Шаг 1: Начинаем транзакцию
BEGIN;

-- Шаг 2: Блокируем Pizza Hut (id=1) для обновления
UPDATE pizzeria 
SET rating = 5 
WHERE id = 1;  -- Pizza Hut

-- ========== СЕССИЯ #2 ==========
-- Шаг 1: Начинаем отдельную транзакцию  
BEGIN;

-- Шаг 2: Блокируем Dominos (id=2) для обновления
UPDATE pizzeria 
SET rating = 5 
WHERE id = 2;  -- Dominos (или другая пиццерия с id=2)

-- ========== СЕССИЯ #1 ==========
-- Шаг 3: Пытаемся заблокировать Dominos (id=2)
-- Эта команда будет ЖДАТЬ, так как Сессия #2 уже заблокировала эту строку
UPDATE pizzeria 
SET rating = 4 
WHERE id = 2;  -- Будет ждать освобождения блокировки

-- ========== СЕССИЯ #2 ==========
-- Шаг 3: Пытаемся заблокировать Pizza Hut (id=1)
-- Эта команда создаст DEADLOCK!
UPDATE pizzeria 
SET rating = 4 
WHERE id = 1;  -- DEADLOCK обнаружен!

-- PostgreSQL автоматически прервет одну из транзакций с ошибкой:
-- ERROR: deadlock detected
-- DETAIL: Process XXX waits for ShareLock on transaction YYY; blocked by process ZZZ.

-- ========== После обнаружения DEADLOCK ==========
-- Одна из транзакций будет автоматически отменена (ROLLBACK)
-- Другая транзакция сможет продолжить работу

-- В той сессии, которая НЕ была отменена:
COMMIT;

-- В той сессии, которая была отменена, нужно начать заново:
-- ROLLBACK; -- (автоматически выполнен PostgreSQL)
-- BEGIN;
-- ... повторить операции ...